
class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if (matrix.empty()) return 0;
        
        int m = matrix.size();
        int n = matrix[0].size();
        
        vector<vector<int>> memo(m, vector<int>(n, 0));
        vector<vector<bool>> vis(m, vector<bool>(n, false));
        
        int maxiPath = 1;
        
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                maxiPath = max(maxiPath, dfs(matrix, memo, vis, i, j, m, n));
            }
        }
        
        return maxiPath;
    }
    
    int dfs(vector<vector<int>>& matrix, vector<vector<int>>& memo, vector<vector<bool>>& vis, int i, int j, int m, int n) {
        if (memo[i][j] > 0) return memo[i][j];
        vis[i][j] = true; 
        
        int maxi = 1;
        int rows[] = {0, 1, 0, -1};
        int columns[] = {1, 0, -1, 0};
        
        for (int k = 0; k < 4; ++k) {
            int newRow = i + rows[k];
            int newColumn = j + columns[k];
            
            if (newRow >= 0 && newRow < m && newColumn >= 0 && newColumn < n && matrix[newRow][newColumn] > matrix[i][j] && !vis[newRow][newColumn]) {
                int length = 1 + dfs(matrix, memo, vis, newRow, newColumn, m, n);
                maxi = max(maxi, length);
            }
        }
        
        memo[i][j] = maxi;
        vis[i][j] = false; 
        return maxi;
    }
};
