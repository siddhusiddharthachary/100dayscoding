//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// Usion Temp

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    string findOrder(string dict[], int N, int K) {
        vector<vector<int>> adjList(K);

        for (int i = 0; i < N - 1; i++) {
            string word1 = dict[i];
            string word2 = dict[i + 1];
            int len = min(word1.size(), word2.size());

            for (int j = 0; j < len; j++) {
                if (word1[j] != word2[j]) {
                    adjList[word1[j]-'a'].push_back(word2[j]-'a');
                    break;
                }
            }
        }

        return topoSort(K, adjList);
    }

    string topoSort(int V, vector<vector<int>>& adjList) {
        vector<int> visited(V, 0);
        stack<int> st;
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs(i, visited, st, adjList);
            }
        }

        string result;
        while (!st.empty()) {
            result += (char)(st.top()+'a');
            st.pop();
        }
        return result;
    }

    void dfs(int node, vector<int>& visited, stack<int>& st, vector<vector<int>>& adjList) {
        visited[node] = 1;
        for (int neighbour : adjList[node]) {
            if (!visited[neighbour]) {
                dfs(neighbour, visited, st, adjList);
            }
        }
        st.push(node);
    }
};


//{ Driver Code Starts.
string order;
bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size()) return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;
        string dict[N];
        for (int i = 0; i < N; i++) cin >> dict[i];
        
        Solution obj;
        string ans = obj.findOrder(dict, N, K);
        order = "";
        for (int i = 0; i < ans.size(); i++) order += ans[i];

        string temp[N];
        std::copy(dict, dict + N, temp);
        sort(temp, temp + N, f);

        bool f = true;
        for (int i = 0; i < N; i++)
            if (dict[i] != temp[i]) f = false;

        if(f)cout << 1;
        else cout << 0;
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends
